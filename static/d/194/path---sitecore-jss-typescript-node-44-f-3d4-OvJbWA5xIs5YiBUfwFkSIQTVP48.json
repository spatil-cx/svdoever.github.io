{"data":{"site":{"siteMetadata":{"title":"Serge van den Oever's weblog","author":"Serge van den Oever"}},"markdownRemark":{"id":"83405b70-c8d3-51cf-9d25-99832e465955","html":"<p>In a <a href=\"/sitecore_jss_typescript\">previous post</a> I described how to use TypeScript in\nbuilding JSS components. In this post I use the results of this connected <strong>hello-jss-typescript</strong>\nJSS app to build a custom Node express web server that consumes the layout service to render\npages. This process is described by Sitecore in the documentation  <a href=\"https://jss.sitecore.com/docs/techniques/ssr/headless-mode-ssr#headless-ssr-via-sitecore-jss-proxy\">Headless SSR via sitecore-jss-proxy</a>.\nI took the sample <a href=\"https://github.com/Sitecore/jss/tree/dev/samples/node-headless-ssr-proxy\">node-headless-ssr-proxy</a> and worked from there.</p>\n<p>I placed the code in a folder <code class=\"language-text\">hello-jss-typescript-node</code> next to the folder <code class=\"language-text\">hello-jss-typescript</code>\nas described in my post <a href=\"/sitecore_jss_typescript\">Developing React components in Typescript with Sitecore JSS 9.1</a>.</p>\n<p>The example provides an Express web server that I modified slightly for easy\nexperimentation. It is great that all configuration is done through environment variables, but for development it is easier to use another\napproach. I added dotenv using <code class=\"language-text\">npm install dotenv</code> and added at the\ntop of <code class=\"language-text\">index.js</code> the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This enables us to add a file <code class=\"language-text\">.env</code> in the root to manage the required\nenvironment variables:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SITECORE_JSS_APP_NAME=hello-jss-typescript\nSITECORE_JSS_SERVER_BUNDLE=../hello-jss-typescript/build/server.bundle.js\nSITECORE_API_HOST=http://hello-jss-typescript.dev.local\nSITECORE_LAYOUT_SERVICE_ROUTE=http://hello-jss-typescript.dev.local/sitecore/api/layout/render/jss\nSITECORE_API_KEY{57231674-4CC9-48AA-AFF0-190DB9D68FE1}\nSITECORE_PATH_REWRITE_EXCLUDE_ROUTES=\nSITECORE_ENABLE_DEBUG=true</code></pre></div>\n<p>I also modified the <code class=\"language-text\">index.js</code> file slightly to work together with the\n<code class=\"language-text\">hello-jss-typescript</code> project:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> compression <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'compression'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> scProxy <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@sitecore-jss/sitecore-jss-proxy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// enable gzip compression for appropriate file types</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">compression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// turn off x-powered-by http header</span>\nserver<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">[</span><span class=\"token string\">'x-powered-by'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Serve static app assets from local /dist folder</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'/dist/hello-jss-typescript/'</span><span class=\"token punctuation\">,</span>\n  express<span class=\"token punctuation\">.</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../hello-jss-typescript/build'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    fallthrough<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// force 404 for unknown assets under /disthello-jss-typescript/</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// For any other requests, we render app routes server-side and return them</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">scProxy</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>serverBundle<span class=\"token punctuation\">.</span>renderView<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>serverBundle<span class=\"token punctuation\">.</span>parseRouteUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`server listening on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Execute <code class=\"language-text\">npm start</code> and voila, the site is running on <code class=\"language-text\">http://localhost:3000</code>, completely separate from the Sitecore server.</p>\n<p>Note that the <code class=\"language-text\">.vscode</code> folder contains a <code class=\"language-text\">launch.json</code> configured to debug the Node code in Visual Studio Code.</p>\n<p>The complete example can be found at <a href=\"https://github.com/macaw-interactive/hello-jss-sitecore-node\">https://github.com/macaw-interactive/hello-jss-sitecore-node</a>.</p>","timeToRead":2,"frontmatter":{"title":"Render Sitecore 9.1 JSS site using separate node server","date":"February 07, 2019","spoiler":"Use a custom Node based server to render Sitecore 9.1 JSS pages."},"fields":{"slug":"/sitecore_jss_typescript_node/"}}},"pageContext":{"slug":"/sitecore_jss_typescript_node/","previous":{"fields":{"slug":"/sitecore_jss_typescript/"},"frontmatter":{"title":"Developing React components in Typescript with Sitecore JSS 9.1"}},"next":{"fields":{"slug":"/sitecore_jss_umbrella/"},"frontmatter":{"title":"Umbrella for Sitecore JSS"}}}}